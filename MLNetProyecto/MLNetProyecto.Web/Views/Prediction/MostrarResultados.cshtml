@model X.PagedList.IPagedList<MLNetProyecto.Entidades.EF.ImagePrediction>
@using X.PagedList.Mvc.Core;

<style>
    .thumbnail {
        position: relative;
        display: inline-block;
        cursor: pointer; /* Cambia el cursor a pointer */
        color: blue; /* Cambia el color del texto a azul */
        text-decoration: underline; /* Subraya el texto */
    }

        .thumbnail img {
            display: none;
            position: absolute;
            top: 0;
            left: 100%;
            width: 200px; /* Tamaño de la miniatura */
            z-index: 10;
        }

        .thumbnail:hover img {
            display: block;
        }
</style>



<div>
    <h2>Mostrar Resultados</h2>
    <table class="table">
        <thead>
            <tr>
                <th>FileName</th>
                <th>Clasificación Predicha</th>
                <th>Predicción Acertada</th>
                <th>Clasificación Real</th>
                <th>Probabilidad</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td class="thumbnail">
                            @item.ImageData.FileName
                            <img src="data:image/jpeg;base64,@item.ImageData.ImagePath" alt="Imagen Analizada" />
                        </td>
                        <td>@item.PredictedLabelValue</td>
                        <td>@(item.IsCorrect.HasValue ? (item.IsCorrect.Value ? "Sí" : "No") : "Sin Verificar")</td>
                        <td>@item.ImageData.Label</td>
                        <td>@item.Score</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No hay resultados para mostrar.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="pagination-container">
    @if (Model.HasPreviousPage)
    {
        <a href="@Url.Action("MostrarResultados", new { page = Model.PageNumber - 1 })" class="pagination-arrow">
            &#9664; <!-- Flecha hacia la izquierda -->
        </a>
    }

    @for (int i = 1; i <= Model.PageCount; i++)
    {
        <a href="@Url.Action("MostrarResultados", new { page = i })"
           class="pagination-number @(i == Model.PageNumber ? "active-page" : "")">
            @i
        </a>
    }

    @if (Model.HasNextPage)
    {
        <a href="@Url.Action("MostrarResultados", new { page = Model.PageNumber + 1 })" class="pagination-arrow">
            &#9654; <!-- Flecha hacia la derecha -->
        </a>
    }
</div>
